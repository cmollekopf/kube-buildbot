# -*- python -*-
# ex: set filetype=python:

from __future__ import absolute_import
from __future__ import print_function

import os
import time

import requests
from flask import Flask
from flask import render_template

from buildbot.process.results import statusToString


from buildbot import config
from buildbot.plugins import *
from buildbot.plugins import util
from buildbot.process import buildstep, logobserver, results
from buildbot.process.results import worst_status

import re
from future.utils import string_types, itervalues
from twisted.internet import defer
from twisted.python import log

import subprocess
import json
import config

# A custom dashboard
mydashboardapp = Flask('test', root_path=os.path.dirname(__file__))
# this allows to work on the template without having to restart Buildbot
mydashboardapp.config['TEMPLATES_AUTO_RELOAD'] = True

@mydashboardapp.route("/index.html")
def main():
    # This code fetches build data from the data api, and give it to the
    # template
    builders = mydashboardapp.buildbot_api.dataGet("/builders")
    builds = mydashboardapp.buildbot_api.dataGet("/builds", limit=20)

    # properties are actually not used in the template example, but this is
    # how you get more properties
    for build in builds:
        build['properties'] = mydashboardapp.buildbot_api.dataGet(
            ("builds", build['buildid'], "properties"))

        build['results_text'] = statusToString(build['results'])

    # Example on how to use requests to get some info from other web servers
    result = subprocess.run("{}/testenv.py srcbuild --noninteractive kube Sink hawd json mail_query".format(config.dockerdir), shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    hawdResult = json.loads(result.stdout)
    datasetName = hawdResult['dataset']
    description = hawdResult['description']
    graph_data = []
    for i, row in enumerate(hawdResult['rows']):
        commit = row['commit']
        value = row['queryResultPerMs']
        dataset = row['rows']
        timestamp = row['timestamp']
        graph_data.append(dict(x=i, y=value))

    # mydashboard.html is a template inside the template directory
    return render_template('mydashboard.html', builders=builders, builds=builds, graph_data=graph_data)

#Buildsteps
class KubeBuildStep(buildstep.ShellMixin, buildstep.BuildStep):

    progressMetrics = ('output',)
    logfiles = {}
    bufferLogObserver = None

    def __init__(self, **kwargs):
        kwargs = self.setupShellMixin(kwargs, prohibitArgs=['command'])
        buildstep.BuildStep.__init__(self, **kwargs)
        self.addLogObserver('stdio', logobserver.OutputProgressObserver("output"))
        self.bufferLogObserver = logobserver.BufferLogObserver()
        self.addLogObserver('stdio', self.bufferLogObserver)

    def evaluateCommand(self, cmd):
        regexes = ((re.compile("FAILED"), results.FAILURE), (re.compile("WARNING"), results.WARNINGS))
        worst = cmd.results()
        for err, possible_status in regexes:
            # worst_status returns the worse of the two status' passed to it.
            # we won't be changing "worst" unless possible_status is worse than it,
            # so we don't even need to check the log if that's the case
            if worst_status(worst, possible_status) == possible_status:
                if err.search(self.bufferLogObserver.getStdout()):
                    worst = possible_status
        return worst

    @defer.inlineCallbacks
    def run(self):
        cmd = yield self.makeRemoteShellCommand(
            command="{}/testenv.py srcbuild --noninteractive kube kdesrcbuild".format(config.dockerdir),
            collectStdout=True
        )
        yield self.runCommand(cmd)
        defer.returnValue(self.evaluateCommand(cmd))

    def setProgress(self, metric, value):
        log.msg("Progress %s %s"% (metric, value))
        self.updateSummary()

    def getResultSummary(self):
        stepsumm = u'finished'
        if self.results != results.SUCCESS:
            stepsumm += u' (%s)' % results.Results[self.results]
        return {u'step': stepsumm}

    def getCurrentSummary(self):
        return {u'step': u'running'}

class DockerCTestStep(buildstep.ShellMixin, buildstep.BuildStep):
    logfiles = {}
    bufferLogObserver = None
    command = None
    regexes = None

    def __init__(self, command, regexes, **kwargs):
        kwargs = self.setupShellMixin(kwargs, prohibitArgs=['command'])
        buildstep.BuildStep.__init__(self, **kwargs)
        self.bufferLogObserver = logobserver.BufferLogObserver()
        self.addLogObserver('stdio', self.bufferLogObserver)
        self.command = command
        self.regexes = regexes

    def evaluateCommand(self, cmd):
        worst = cmd.results()
        for err, possible_status in self.regexes:
            # worst_status returns the worse of the two status' passed to it.
            # we won't be changing "worst" unless possible_status is worse than it,
            # so we don't even need to check the log if that's the case
            if worst_status(worst, possible_status) == possible_status:
                if err.search(self.bufferLogObserver.getStdout()):
                    worst = possible_status
        return worst

    @defer.inlineCallbacks
    def run(self):
        cmd = yield self.makeRemoteShellCommand(
            command=self.command,
            collectStdout=True
        )
        yield self.runCommand(cmd)
        defer.returnValue(self.evaluateCommand(cmd))



# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None
####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("example-worker", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []
#For "buildbot sendchange"
c['change_source'].append(changes.PBChangeSource(port=9999, user='user', passwd='userpw'))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.ChangeFilter(branch='develop'),
                            treeStableTimer=None,
                            builderNames=["buildkube", "testkube"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["buildkube", "testkube"]))
c['schedulers'].append(schedulers.Try_Userpass(
                                    name='try',
                                    builderNames=['buildkube', 'testkube'],
                                    port=5555,
                                    userpass=[('user','userpw')]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.
c['builders'] = []

dockerenv = {
    "PYTHONPATH": config.dockerdir,
    "PATH": "/usr/bin:${PATH}"
}

factory = util.BuildFactory()
factory.addStep(KubeBuildStep(env=dockerenv))

c['builders'].append(
    util.BuilderConfig(name="buildkube",
      workernames=["example-worker"],
      factory=factory))

factory = util.BuildFactory()
factory.addStep(DockerCTestStep(
    command="{}/testenv.py srcbuild --imap --noninteractive kube Sink ctest -V".format(config.dockerdir),
    regexes=((re.compile("FAILED"), results.FAILURE), ),
    env=dockerenv)
)
factory.addStep(DockerCTestStep(
    command="{}/testenv.py srcbuild --x11forward --noninteractive kube Kube ctest -V".format(config.dockerdir),
    regexes=((re.compile("FAILED"), results.FAILURE), ),
    env=dockerenv)
)

c['builders'].append(
    util.BuilderConfig(name="testkube",
      workernames=["example-worker"],
      factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.
c['services'] = []
c['services'].append(reporters.IRC(host="chat.freenode.net", nick="bbkube", channels=["#kube"], port=6665))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Hello World CI"
c['titleURL'] = "https://buildbot.github.io/hello-world/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
# Custom dashboard
c['www']['plugins']['wsgi_dashboards'] = [  # This is a list of dashboards, you can create several
    {
        'name': 'mydashboard',  # as used in URLs
        'caption': 'My Dashboard',  # Title displayed in the UI'
        'app': mydashboardapp,
        # priority of the dashboard in the left menu (lower is higher in the
        # menu)
        'order': 5,
        # available icon list can be found at http://fontawesome.io/icons/
        'icon': 'area-chart'
    }
]

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
